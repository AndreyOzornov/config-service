# We need to setup different context root for the auth server so that we can store separate
# cookies for both the API gateway as well as the OAuth2 authorization server.
server:
  port: 8899
  contextPath: /userauth

security:
  user:
    password: password

logging:
  level:
    org.springframework.security: DEBUG
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/
---

spring:
  profiles: docker
# Datasource and JPA configuration to be used for storing the OAuth authorization details
# and token store

  data:
    mongodb:
      host: 52.57.210.172
      port: 27017
      database: aucobo
      username: aucoborw
      password: yemnofomm0!blub
      authentication-database: admin
      repositories:
        enabled: true

eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/

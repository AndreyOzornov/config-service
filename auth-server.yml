# We need to setup different context root for the auth server so that we can store separate
# cookies for both the API gateway as well as the OAuth2 authorization server.
server:
  port: 8899
  contextPath: /userauth

#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://mysqldb:8761/eureka/

security:
  user:
    password: password

logging:
  level:
    org.springframework.security: DEBUG
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/
# Datasource and JPA configuration to be used for storing the OAuth authorization details
# and token store
#spring:
#  datasource:
#    url: jdbc:mysql://mysqldb:3306/auth
#    username: root
#    password: admin
#    driver-class: com.mysql.jdbc.Driver
#
#  jpa:
#    database-platform: org.hibernate.dialect.MySQLDialect
#    show-sql: false
#    hibernate:
#      ddl-auto: create

---

spring:
  profiles: docker
# Datasource and JPA configuration to be used for storing the OAuth authorization details
# and token store

  data:
    mongodb:
      host: 192.168.0.126
      port: 27017
      database: oauth
      username: cd2
      password: cd2


#  datasource:
#    url: jdbc:mysql://172.18.0.2:3306/auth
#    username: root
#    password: admin
#    driver-class: com.mysql.jdbc.Driver
#
#  jpa:
#    database-platform: org.hibernate.dialect.MySQLDialect
#    show-sql: false
#    hibernate:
#      ddl-auto: create
eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/

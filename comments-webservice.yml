server:
  port: 8083

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

spring:
  zipkin:
    baseUrl: http://localhost:9411/
  sleuth:
    sampler:
      percentage: 1.0

# When enabled=false, traces log to the console. Comment to send to zipkin
sample:
  zipkin:
    enabled: true

# Note that we will use the JWT token to get user data
security:
  oauth2:
    resource:
      jwt:
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAh04LdEH+pL1oTFZgFVFi
          bcSjMsHRa2U5JDRRIgiJICFTmVTAPdHMOa9/8/FwRmcUvTjWkrNiHkACXaHTzTbk
          6r742De46rnL3qd6QLk2NkkuQYG7uX4M+wUSGGxzB//VjUJ3zBg4rA+knJIQm5Xk
          mNobRc5ezGBzJ7qO/dTwlnGVoRSCA2FfHbG1ivNtU28+C1VklZ//YEpjVEVpnHy4
          wDsBlSkrbM+rU+8WGPLbS/qtaL73jPMPF+nbYOAt4RFrglN9iT1o9YuAsKIxQxZf
          f3EzCisBp8t8N6paDxnSUHYNo4Dw80I3+BED7h7xwS+UGIPi7V9WmYUg4uEi23Iw
          VQIDAQAB
          -----END PUBLIC KEY-----
---
# comments-webservice instance when used on Docker
spring:
  profiles: docker
  zipkin:
    baseUrl: http://zipkinserver:9411/

eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/

# Define the port where the API gateway server would be running. This could always be port 8080
# since each docker container has it's own IP
server:
  port: 8080
